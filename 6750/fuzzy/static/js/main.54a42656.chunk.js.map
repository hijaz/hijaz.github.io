{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","columnDefs","headerName","field","sortable","rowData","data","list","keys","width","resultsTemplate","styles","clickHandler","results","map","val","i","style","selectedIndex","selectedResultStyle","resultsStyle","key","onClick","Crse","Title","Sec","float","opacity","Subj","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oi8gGAAAA,EAAOC,QAAU,IAA0B,kC,0NCgF5BC,E,YAtEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,WAAY,CACV,CAAEC,WAAY,SAAUC,MAAO,SAAUC,UAAU,GACnD,CAAEF,WAAY,MAAOC,MAAO,MAAOC,UAAU,GAC7C,CAAEF,WAAY,OAAQC,MAAO,OAAQC,UAAU,GAC/C,CAAEF,WAAY,OAAQC,MAAO,OAAQC,UAAU,GAC/C,CAAEF,WAAY,MAAOC,MAAO,MAAOC,UAAU,GAC7C,CAAEF,WAAY,MAAOC,MAAO,MAAOC,UAAU,GAC7C,CAAEF,WAAY,MAAOC,MAAO,MAAOC,UAAU,GAC7C,CAAEF,WAAY,OAAQC,MAAO,OAAQC,UAAU,GAC/C,CAAEF,WAAY,QAASC,MAAO,QAASC,UAAU,GACjD,CAAEF,WAAY,OAAQC,MAAO,OAAQC,UAAU,GAC/C,CAAEF,WAAY,OAAQC,MAAO,OAAQC,UAAU,GAC/C,CAAEF,WAAY,MAAOC,MAAO,MAAOC,UAAU,GAC7C,CAAEF,WAAY,MAAOC,MAAO,MAAOC,UAAU,GAC7C,CAAEF,WAAY,MAAOC,MAAO,MAAOC,UAAU,GAC7C,CAAEF,WAAY,SAAUC,MAAO,SAAUC,UAAU,GACnD,CAAEF,WAAY,SAAUC,MAAO,SAAUC,UAAU,GACnD,CAAEF,WAAY,SAAUC,MAAO,SAAUC,UAAU,GACnD,CAAEF,WAAY,aAAcC,MAAO,aAAcC,UAAU,GAC3D,CAAEF,WAAY,WAAYC,MAAO,WAAYC,UAAU,GACvD,CAAEF,WAAY,YAAaC,MAAO,YAAaC,UAAU,IAE3DC,QAASC,GAzBM,E,sEA8BjB,OACE,kBAAC,IAAD,CACEC,KAAMD,EACNE,KAAM,CAAC,OAAQ,QAAS,MAAO,OAAQ,QACvCC,MAAO,IAEPC,gBAAiB,SAACX,EAAOC,EAAOW,EAAQC,GACtC,OAAOZ,EAAMa,QAAQC,KAAI,SAACC,EAAKC,GAC7B,IAAMC,EACJjB,EAAMkB,gBAAkBF,EACpBL,EAAOQ,oBACPR,EAAOS,aACb,OACE,yBAAKC,IAAKL,EAAGC,MAAOA,EAAOK,QAAS,kBAAMV,EAAaI,KACpDD,EAAIQ,KADP,IACcR,EAAIS,MADlB,IAC0BT,EAAIU,IAC5B,0BAAMR,MAAO,CAAES,MAAO,QAASC,QAAS,KAAxC,SACSZ,EAAIa,iB,GA/CXC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.54a42656.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-fresh.css\";\nimport data from \"./data.json\";\nimport FuzzySearch, { action } from \"react-fuzzy\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnDefs: [\n        { headerName: \"Select\", field: \"Select\", sortable: true },\n        { headerName: \"CRN\", field: \"CRN\", sortable: true },\n        { headerName: \"Subj\", field: \"Subj\", sortable: true },\n        { headerName: \"Crse\", field: \"Crse\", sortable: true },\n        { headerName: \"Sec\", field: \"Sec\", sortable: true },\n        { headerName: \"Cmp\", field: \"Cmp\", sortable: true },\n        { headerName: \"Bas\", field: \"Bas\", sortable: true },\n        { headerName: \"Cred\", field: \"Cred\", sortable: true },\n        { headerName: \"Title\", field: \"Title\", sortable: true },\n        { headerName: \"Days\", field: \"Days\", sortable: true },\n        { headerName: \"Time\", field: \"Time\", sortable: true },\n        { headerName: \"Cap\", field: \"Cap\", sortable: true },\n        { headerName: \"Act\", field: \"Act\", sortable: true },\n        { headerName: \"Rem\", field: \"Rem\", sortable: true },\n        { headerName: \"WL Cap\", field: \"WL Cap\", sortable: true },\n        { headerName: \"WL Act\", field: \"WL Act\", sortable: true },\n        { headerName: \"WL Rem\", field: \"WL Rem\", sortable: true },\n        { headerName: \"Instructor\", field: \"Instructor\", sortable: true },\n        { headerName: \"Location\", field: \"Location\", sortable: true },\n        { headerName: \"Attribute\", field: \"Attribute\", sortable: true }\n      ],\n      rowData: data\n    };\n  }\n\n  render() {\n    return (\n      <FuzzySearch\n        list={data}\n        keys={[\"Subj\", \"Title\", \"Sec\", \"Days\", \"Crse\"]}\n        width={430}\n        // onSelect={action(\"selected\")}\n        resultsTemplate={(props, state, styles, clickHandler) => {\n          return state.results.map((val, i) => {\n            const style =\n              state.selectedIndex === i\n                ? styles.selectedResultStyle\n                : styles.resultsStyle;\n            return (\n              <div key={i} style={style} onClick={() => clickHandler(i)}>\n                {val.Crse} {val.Title} {val.Sec}\n                <span style={{ float: \"right\", opacity: 0.5 }}>\n                  Subj: {val.Subj}\n                </span>\n              </div>\n            );\n          });\n        }}\n      />\n\n      // <div\n      //   className=\"ag-theme-fresh\"\n      //   style={{\n      //     height: \"100vh\",\n      //     width: \"100vw\"\n      //   }}\n      // >\n      //   <AgGridReact\n      //     columnDefs={this.state.columnDefs}\n      //     rowData={this.state.rowData}\n      //   ></AgGridReact>\n      // </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}